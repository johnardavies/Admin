
# within the repo initalise git
$ git init

# adds modified and new files to the index prior to committing
$ git add .

# commits changes that have been made, in this case called test commit
$ git commit -m "test commit"

# combines the add and the commit command in one line
$ git commit -a -m "test commit"

# pulls the latest version from the remote repo if run from local repo
$ git pull (when a commit message is needed for this, press Esc then :wq , ctrl x and then ctrl c to exit the editor - if it's nano)

# produces a record of commits, type q to exit
$ git log

# shows files in last commit 
$ git diff-tree --name-only -r indexofcommit

# Lists the files that are being tracked in the master branch
$ git ls-tree -r master --name-only

# Searches the git history
$ git grep <regexp> $(git rev-list --all) # git rev-list --all lists all the commit objects in reverse chronological order (The commit hashes)

##################### Undoing/Amending changes you have made

# Gives the opportunity to revise the last commit message or if you need to
# make further changes incorporate them into an updated version of the last commit
$ git commit --amend

#Change the commit message of the last commit that has not yet been pushed
$ git commit --amend -m "New commit message."

#Reverts the commit with index indexofcommit
$ git revert indexofcommit

# Rolls back local changes, but does not remove the last commit
$ git reset --hard

# Go back to the state after a past commit with commit hash abcd1
$ git checkout abcd1

# Undoes uncommited changes to a file permanently
git checkout -- file

#### Stashing
# Removes uncommited changes to a 'stash'
$ git stash

# Removes the changes from the stash and applies them to branch you are working on
$ git stash pop

###################### Which branch is being worked on

# lists the branches and which one is being worked on
$ git branch

# branches the repo into a new branch
$ git branch new_branch

# switch to working on the new branch
$ git checkout new_branch

#switch back to the master branch
$ git checkout -

#pushes changes to online repo where origin is the repo name and master is the branch name
# just git push if the names are the same. If you have branched to a new branch, master changes to the new branch name
$ git push origin master

# Merges remote changes with local changes
$ git pull origin master

# Selects specific commits e.g. commit1  commit2 from another branch and applies it to the branch you're on
$ git cherry-pick commit1  commit2

###################### Which online repo the local repo is linked to 

#Checks which online repos the local repo is linked with
$ git remote -v

# Changes the url of the remote repo that the local copy is linked to
$ git remote set-url origin new.git.url/here

################## Merges the git commit history of two previously unrelated projects, pulling the master branch from the remote origin that has been set up to the local repo
git pull origin master --allow-unrelated-histories

##################### Removing a folder and its contents from git history (use carefully) --ignore-unmatch means it doesn't throw an error if no match -r deletes contents
$  git filter-branch --index-filter 'git rm -r --cached --ignore-unmatch filepath/folder' HEAD
